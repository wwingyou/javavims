return {
  'williamboman/mason.nvim',
  dependencies = {
    'williamboman/mason-lspconfig.nvim',
    'neovim/nvim-lspconfig',
    'jay-babu/mason-nvim-dap.nvim',
  },
  enabled = false,
  config = function()
    require'mason'.setup {}
    require'mason-lspconfig'.setup {
      ensure_installed = { 'lua_ls' }
    }
    require'mason-nvim-dap'.setup {
      ensure_installed = { 'js', 'java', 'java-test' }
    }
    local lspconfig = require'lspconfig'
    local lsp_utils = require'utils.lsp'

    lspconfig.lua_ls.setup {
      capabilities = lsp_utils.capabilities(),
      on_init = function(client)
        if client.workspace_folders then
          local path = client.workspace_folders[1].name
          if vim.loop.fs_stat(path..'/.luarc.json') or vim.loop.fs_stat(path..'/.luarc.jsonc') then
            return
          end
        end

        client.config.settings.Lua = vim.tbl_deep_extend('force', client.config.settings.Lua, {
          runtime = {
            -- Tell the language server which version of Lua you're using
            -- (most likely LuaJIT in the case of Neovim)
            version = 'LuaJIT'
          },
          -- Make the server aware of Neovim runtime files
          workspace = {
            checkThirdParty = false,
            library = {
              vim.env.VIMRUNTIME,
              vim.fn.stdpath('data') .. '/lazy',
              -- Depending on the usage, you might want to add additional paths here.
              -- "${3rd}/luv/library"
              -- "${3rd}/busted/library",
            }
            -- or pull in all of 'runtimepath'. NOTE: this is a lot slower
            -- library = vim.api.nvim_get_runtime_file("", true)
          }
        })
      end,
      settings = {
        Lua = {}
      }
    }

    lspconfig.lemminx.setup {
      capabilities = lsp_utils.capabilities(),
    }

    lspconfig.pylsp.setup {}
    lspconfig.ruby_lsp.setup {}
    lspconfig.ts_ls.setup {
      capabilities = lsp_utils.capabilities(),
    }
    lspconfig.gradle_ls.setup {
      filetypes = {
        "groovy", "kotlin"
      }
    }
    lspconfig.clangd.setup {}
    lspconfig.gopls.setup {
      capabilities = lsp_utils.capabilities()
    }
  end
}

